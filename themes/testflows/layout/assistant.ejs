<div class="page container-fluid text-center p-0" id="welcome-banner">
    <div class="banner in-view-watcher">
        <div id="banner-graph" class="banner-graph"></div>
        <h1><%- page.title %></h1>
        <h2><%- page.heading %></h2>
        <i class="fa-5x pt-3 <%- page.icon %>" style="color: lime"></i>
        <div id="api-key-status" class="text-success"><br></div>
        <div class="api-key-box input-group mb-3 col-sm-6" id="api-key-box">
            <div class="input-group-prepend d-none d-sm-block">
              <span class="input-group-text" id="basic-addon3">Access Key</span>
            </div>
            <input type="password" name="password" class="form-control text-center" placeholder="Enter access key here" id="api-key" aria-describedby="basic-addon3" oninput="checkApiKey()">
        </div>
    </div>
</div>
<div class="assistant container-fluid d-none" id="assistant">
    <div class="container">
        <div class="box-questions" id="box-questions">
            <div id="history"></div>
        </div>
        <div class="container assistant-control" id="assistant-control">
            <div id="status" class="text-success"><br></div>
            <div class="message-input-box">
                <textarea id="message-input" class="code" name="message-input" rows="3" placeholder="Type your request here and refer to TestFlows as testflows.core" oninput="startMessage()"></textarea>
                <div class="message-filler"></div>
            </div>
            <div class="btn-group-vertical float-right" role="group" aria-label="control buttons">
                <button class="btn disabled" type="move-up" id="btn-move-up" onclick="moveUpMessage()">
                    <a class="fas fa-arrow-up"></a>
                </button>
                <button class="btn disabled" type="move-down" id="btn-move-down" onclick="moveDownMessage()">
                    <a class="fas fa-arrow-down"></a>
                </button>
                <button class="btn text-danger invisible" type="cancel" id="btn-cancel" onclick="cancelMessage()">
                    <a class="fas fa-comment-slash"></a>
                </button>
                <button class="btn disabled" type="submit" id="btn-submit" onclick="sendMessage()">
                    <a class="fas fa-keyboard"></a>
                </button>
            </div>
        </div>
    </div>
</div>
<%- partial('_partial/hero_graph') %>
<script>
    const apiKeyCode = '69d2245ecf1e4049893c4327dfcaf5fdb795e548de43724ba8bfd4e01233891f3552fffa33ec7969'
    const urlCode = '2f31be98e988461fac622fed4fbe63a7298007609dd071c927ecb1475d25fb6f17433514b59a2e'
    var apiKey, url
    var historyPos = -1

    function array2hex(array) {
        str = []
        for (x of array) {
            str.push(x.toString(16).padStart(2,'0'))
        }
        return str.join('')
    }

    function hex2array(hex) {
        function splitBy(str, n) {
            const arr = [];
            for (let index = 0; index < str.length; index += n) {
                arr.push(str.slice(index, index + n));
            }
            return arr;
        }
        array = []
        for (x of splitBy(hex,2)) {
            array.push(parseInt(x, 16))
        }
        return Uint8Array.from(array);
    }

    function encrypt(string) {
        encoded = new TextEncoder().encode(string)
        key = new Uint8Array(encoded.length)
        self.crypto.getRandomValues(key)
        code = encoded.map((c, i) => c ^ key[i])
        return {
            "code": array2hex(code),
            "key": array2hex(key)
        }
    }

    function decrypt(code, key) {
        key = hex2array(key)
        code = hex2array(code)
        return new TextDecoder().decode(code.map((c,i) => c ^ key[i]))
    }

    function checkApiKey() {
        var key = document.getElementById('api-key')
        var status = document.getElementById('api-key-status')
        var banner = document.getElementById('welcome-banner')
        var assistant = document.getElementById('assistant')

        if(!key.value) {
            status.innerText = 'No access key'
            return
        }

        key_parts = key.value.split('|')
        if (key_parts.length < 2) {
            status.innerText = 'Invalid access key format'
            return
        }

        url = decrypt(urlCode, key_parts[0])
        apiKey = decrypt(apiKeyCode, key_parts[1])

        if (!url.startsWith('https://')) {
            status.innerText = 'Invalid access key'
            return
        }

        fetch(`${url}/status/1`,{
            method: 'POST',
            headers: {
                Accept: "application/json",
                "Content-Type": "application/json",
                Authorization: `Bearer ${apiKey}`,
            },
        })
        .then((response) => {
            status.innerText = 'Access key is valid. Welcome!'
            banner.classList.add('d-none')
            assistant.classList.remove('d-none')
        })
        .catch((e) => {
            console.log(`Error -> ${e}`)
            status.innerHTML = 'Invalid access key'
        })
    }

    function streamOutput(jobId, updateResponseMessage) {
        var status = document.getElementById('status')

        fetch(`${url}/stream/${jobId}`,{
            method: 'POST',
            headers: {
                Accept: "application/json",
                "Content-Type": "application/json",
                Authorization: `Bearer ${apiKey}`,
            },
        })
        .then((response) => {
            if (response.ok) {
                return response.json();
            }
            throw new Error(response.status);
        })
        .then((response) => {
            var responseMessage = ''
            console.log(response)
            status.innerHTML = 'Status: ' + response.status.toLowerCase().replace('_',' ')
            if ('stream' in response) {
                for (chunk of response.stream) {
                    for (text of chunk.output.text) {
                        responseMessage += text
                    }
                }
            }
            function cb() {
                if (response.status != 'COMPLETED' && response.status != 'FAILED' && response.status != 'CANCELLED') {
                    streamOutput(jobId, updateResponseMessage)
                }
                else {
                    var message = document.getElementById('message-input')
                    var send = document.getElementById('btn-submit')
                    var cancel = document.getElementById('btn-cancel')
                    send.classList.remove('invisible')
                    cancel.classList.add('invisible')
                    message.removeAttribute('message-id')
                    message.disabled = false

                    if (response.status != 'COMPLETED') {
                        updateResponseMessage(`>>> error: ${response.status} <<<`, function(){})
                    }
                }
            }
            updateResponseMessage(responseMessage, cb)
        })
        .catch((e) => {
            console.log(`Error -> ${e}`)
            status.innerHTML = `${e}`
            status.classList.add('text-danger')
            status.classList.remove('text-success')
        })
    }

    function moveUpMessage() {
        var message = document.getElementById('message-input')
        var history = document.getElementById('history')
        historyPos = Math.min(historyPos + 1, history.querySelectorAll('.my-message').length-1)
        var requests = history.querySelectorAll('.my-message')
        message.value = requests[requests.length - 1 - historyPos].innerText
        message.dispatchEvent(new Event("input"))
    }

    function moveDownMessage() {
        var message = document.getElementById('message-input')
        var history = document.getElementById('history')
        historyPos = historyPos - 1
        if (historyPos >= 0) {
            var requests = history.querySelectorAll('.my-message')
            message.value = requests[requests.length -1 - historyPos].innerText
            message.dispatchEvent(new Event("input"))
        }
        else {
            message.value = ''
            historyPos = -1
        }
    }

    function startMessage() {
        var message = document.getElementById('message-input')
        var send = document.getElementById('btn-submit')
        if (message.value) {
            send.classList.remove('disabled')
            send.classList.add('active')
        }
        else {
            send.classList.add('disabled')
            send.classList.remove('active')
        }
    }

    function cancelMessage() {
        var message = document.getElementById('message-input')
        var status = document.getElementById('status')
        var send = document.getElementById('btn-submit')
        var cancel = document.getElementById('btn-cancel')

        const message_id = message.getAttribute('message-id')
        status.classList.remove('text-danger')
        status.classList.add('text-success')
        status.innerHTML = "Request: canceling"

        fetch(`${url}/cancel/${message_id}`,{
            method: 'POST',
            headers: {
                Accept: "application/json",
                "Content-Type": "application/json",
                Authorization: `Bearer ${apiKey}`,
            },
        })
        .then((response) => {
            if (response.ok) {
                return response.json();
            }
            throw new Error(response.status);
        })
        .then((response) => {
            console.log(response)
            cancelled = false
            if (response.hasOwnProperty('status')) {
                status.innerHTML = 'Request: ' + response.status.toLowerCase()
                if (response.status == 'CANCELLED') {
                    cancelled = true
                }
            }
            if (response.hasOwnProperty('error')) {
                status.innerHTML = 'Request: ' + response.error
                if (response.error == 'job is already completed') {
                    cancelled = true
                }
            }
            if (cancelled) {
                message.removeAttribute('message-id')
                send.classList.remove('invisible')
                cancel.classList.add('invisible')
            }
        })
        .catch((e) => {
            console.log(`Error -> ${e}`)
            status.classList.add('text-danger')
            status.classList.remove('text-success')
            status.innerHTML = `${e}`
        })
    }

    function sendMessage(){
        var message = document.getElementById('message-input')
        var status = document.getElementById('status')
        var key = document.getElementById('api-key')
        var send = document.getElementById('btn-submit')
        var cancel = document.getElementById('btn-cancel')
        var move_up = document.getElementById('btn-move-up')
        var move_down = document.getElementById('btn-move-down')

        status.classList.remove('text-danger', 'text-success')

        if (send.classList.contains('disabled')) {
            return
        }

        if(!message.value) {
            status.innerText = 'Empty prompt'
            status.classList.add('text-danger')
            return
        }

        var responseMessage = ''

        status.style.display = 'block'
        status.innerHTML = 'Status: sending'
        status.classList.add('text-success')
        message.disabled = true
        send.disabled = true
        send.style.cursor = 'not-allowed'
        send.classList.add('disabled')
        send.classList.add('invisible')
        send.classList.remove('active')
        cancel.classList.remove('invisible')
        move_up.classList.add('active')
        move_up.classList.remove('disabled')
        move_down.classList.add('active')
        move_down.classList.remove('disabled')
        historyPos = -1

        fetch(`${url}/run`,{
            method: 'POST',
            headers: {
                Accept: "application/json",
                "Content-Type": "application/json",
                Authorization: `Bearer ${apiKey}`,
            },
            body: JSON.stringify({
                input: {
                    "prompt": `\nBelow is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\n${message.value}\n\n### Response:\n`,
                }
            })
        })
        .then((response) => {
            if (response.ok) {
                return response.json();
            }
            throw new Error(response.status);
        })
        .then((response) => {
        console.log(response)
            updateMessage(message.value)
            updateResponseMessage = createResponseMessage('')
            message.setAttribute('message-id', response.id)
            streamOutput(response.id, updateResponseMessage)
        })
        .catch((e) => {
            console.log(`Error -> ${e}`)
            status.innerHTML = `${e}`
            status.classList.add('text-danger')
            status.classList.remove('text-success')
            send.classList.remove('invisible', 'active')
            cancel.classList.add('invisible')
        })
        .finally(() => {
            send.disabled = false
            send.style.cursor = 'pointer'
            message.disabled = false
            message.value = ''
        })
    }

    function typeText(i, delay, text, element, cb) {
        text = text.replace('\r','')
        element.innerText += text.charAt(i)
        setTimeout(function(){
            ((i < text.length - 1) ? typeText(i+1, delay, text, element, cb) : cb())
        }, delay);
    }

    function updateMessage(message) {
        var historyBox = document.getElementById('history')

        var boxMyMessage = document.createElement('figure')
        boxMyMessage.classList.add('box-my-message','highlight')

        var myMessageIcon = document.createElement('div')
        myMessageIcon.className = 'message-icon fas fa-users'

        var myMessage = document.createElement('pre')
        myMessage.classList.add('my-message','code')
        myMessage.innerText = message

        boxMyMessage.appendChild(myMessageIcon)
        boxMyMessage.appendChild(myMessage)

        historyBox.appendChild(boxMyMessage)
        codeblock_copy()
    }

    function createResponseMessage(response) {
        var questionsBox = document.getElementById('box-questions')
        var controlBox = document.getElementById('assistant-control')
        var historyBox = document.getElementById('history')

        var boxResponseMessage = document.createElement('figure')
        boxResponseMessage.classList.add('box-response-message', 'highlight')

        var chatResponseIcon = document.createElement('div')
        chatResponseIcon.className = 'message-icon fas fa-robot'

        var chatResponse = document.createElement('pre')
        chatResponse.classList.add('response-message','code')
        chatResponse.innerText = response

        boxResponseMessage.appendChild(chatResponseIcon)
        boxResponseMessage.appendChild(chatResponse)

        historyBox.appendChild(boxResponseMessage)
        codeblock_copy()

        console.log("scrolling to the bottom")
        questionsBox.scrollTop = questionsBox.scrollHeight

        function typeText(i, delay, text, element, cb) {
            text = text.replace('\r','')

            at_the_bottom = false
            if (questionsBox.scrollTop + 1 > (questionsBox.scrollHeight - questionsBox.offsetHeight)) {
                at_the_bottom = true
            }

            element.innerText += text.charAt(i)

            if (at_the_bottom) {
                questionsBox.scrollTop = questionsBox.scrollHeight
            }

            setTimeout(function(){
                ((i < text.length - 1) ? typeText(i+1, delay, text, element, cb) : cb())
            }, delay)
        }

        function updateResponseMessage(chunk, cb) {
            typeText(0, 10, chunk, chatResponse, cb)
        }

        return updateResponseMessage
    }
</script>
