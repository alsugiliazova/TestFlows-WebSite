<div class="page container-fluid text-center p-0" style="padding-bottom: 2em !important">
    <div class="banner in-view-watcher">
        <h1><%- page.title %></h1>
        <h2><%- page.heading %></h2>
        <i class="fa-5x pt-3 <%- page.icon %>"></i>
    </div>
</div>
<div class="assistant">
    <div class="container" style="padding-bottom: 2em !important;">
        <div class="box-questions">
            <div class="input-group mb-3">
                <div class="input-group-prepend">
                  <span class="input-group-text" id="basic-addon3">Access Key</span>
                </div>
                <input type="password" name="password" class="form-control" placeholder="Enter your assistant's access key here" id="api-key" aria-describedby="basic-addon3">
            </div>
            <div id="status">Waiting for prompt ...</div>
            <div class="message-input-box">
                <textarea id="message-input" name="message-input" rows="5" placeholder="Type your request here. Refer to TestFlows as testflows.core ..."></textarea>
                <button class="btn" id="btn-submit" onclick="sendMessage()">
                    <span class="fas fa-2x fa-comment pr-2"></span>
                </button>
              </div>
            <div id="history"></div>
          </div>
    </div>
</div>
<script>
    const apiKeyCode = '69d2245ecf1e4049893c4327dfcaf5fdb795e548de43724ba8bfd4e01233891f3552fffa33ec7969'
    const urlCode = '2f31be98e988461fac622fed4fbe63a7298007609dd071c927ecb1475d25fb6f17433514b59a2e'
    var apiKey, url

    function array2hex(array) {
        str = []
        for (x of array) {
            str.push(x.toString(16).padStart(2,'0'))
        }
        return str.join('')
    }

    function hex2array(hex) {
        function splitBy(str, n) {
            const arr = [];
            for (let index = 0; index < str.length; index += n) {
                arr.push(str.slice(index, index + n));
            }
            return arr;
        }
        array = []
        for (x of splitBy(hex,2)) {
            array.push(parseInt(x, 16))
        }
        return Uint8Array.from(array);
    }

    function encrypt(string) {
        encoded = new TextEncoder().encode(string)
        key = new Uint8Array(encoded.length)
        self.crypto.getRandomValues(key)
        code = encoded.map((c, i) => c ^ key[i])
        return {
            "code": array2hex(code),
            "key": array2hex(key)
        }
    }

    function decrypt(code, key) {
        key = hex2array(key)
        code = hex2array(code)
        return new TextDecoder().decode(code.map((c,i) => c ^ key[i]))
    }

    function streamOutput(jobId, updateResponseMessage) {
        var status = document.getElementById('status')

        fetch(`${url}/stream/${jobId}`,{
            method: 'POST',
            headers: {
                Accept: "application/json",
                "Content-Type": "application/json",
                Authorization: `Bearer ${apiKey}`,
            },
        })
        .then((response) => response.json())
        .then((response) => {
            var responseMessage = ''
            console.log(response)
            status.innerHTML = response.status.toLowerCase().replace('_',' ') + ' ...'
            if ('stream' in response) {
                for (chunk of response.stream) {
                    for (text of chunk.output.text) {
                        responseMessage += text
                    }
                }
            }
            function cb() {
                if (response.status != "COMPLETED" && response.status != "FAILED") {
                    streamOutput(jobId, updateResponseMessage)
                }
            }
            updateResponseMessage(responseMessage, cb)
        })
    }

    function sendMessage(){
        var message = document.getElementById('message-input')
        var status = document.getElementById('status')
        var key = document.getElementById('api-key')

        if(!message.value) {
            status.innerText = 'empty prompt ...'
            return
        }
        else if(!key.value) {
            status.innerText = 'no key ...'
            return
        }

        key_parts = key.value.split('|')
        if (key_parts.length < 2) {
            status.innerText = 'invalid key format ...'
            return
        }

        url = decrypt(urlCode, key_parts[0])
        apiKey = decrypt(apiKeyCode, key_parts[1])

        if (!url.startsWith('https://')) {
            status.innerText = 'invalid key ...'
            return
        }

        var btnSubmit = document.getElementById('btn-submit')
        var responseMessage = ''

        status.style.display = 'block'
        status.innerHTML = 'sending...'
        btnSubmit.disabled = true
        btnSubmit.style.cursor = 'not-allowed'
        message.disabled = true

        fetch(`${url}/run`,{
            method: 'POST',
            headers: {
                Accept: "application/json",
                "Content-Type": "application/json",
                Authorization: `Bearer ${apiKey}`,
            },
            body: JSON.stringify({
                input: {
                    "prompt": `\nBelow is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\n${message.value}\n\n### Response:\n`,
                }
            })
        })
        .then((response) => response.json())
        .then((response) => {
        console.log(response)
            updateMessage(message.value)
        updateResponseMessage = createResponseMessage('')
            streamOutput(response.id, updateResponseMessage)
        })
        .catch((e) => {
            console.log(`Error -> ${e}`)
            status.innerHTML = `${e}`
        })
        .finally(() => {
            btnSubmit.disabled = false
            btnSubmit.style.cursor = 'pointer'
            message.disabled = false
            message.value = ''
        })
    }

    function typeText(i, delay, text, element, cb) {
        text = text.replace('\r','')
        element.innerText += text.charAt(i)
        setTimeout(function(){
            ((i < text.length - 1) ? typeText(i+1, delay, text, element, cb) : cb())
        }, delay);
    }

    function updateMessage(message) {
        var historyBox = document.getElementById('history')

        var boxMyMessage = document.createElement('div')
        boxMyMessage.className = 'box-my-message'

        var myMessageIcon = document.createElement('div')
        myMessageIcon.className = 'message-icon fas fa-users'

        var myMessage = document.createElement('pre')
        myMessage.className = 'my-message'
        myMessage.innerText = message

        boxMyMessage.appendChild(myMessageIcon)
        boxMyMessage.appendChild(myMessage)

        historyBox.appendChild(boxMyMessage)

        historyBox.scrollTop = historyBox.scrollHeight
        document.getElementsByClassName('box-questions')[0].scrollIntoView()
        window.scrollBy(0, -70)
    }

    function createResponseMessage(response) {
        var historyBox = document.getElementById('history')

        var boxResponseMessage = document.createElement('div')
        boxResponseMessage.className = 'box-response-message'

        var chatResponseIcon = document.createElement('div')
        chatResponseIcon.className = 'message-icon fas fa-robot'

        var chatResponse = document.createElement('pre')
        chatResponse.className = 'response-message'
        chatResponse.innerText = response

        boxResponseMessage.appendChild(chatResponseIcon)
        boxResponseMessage.appendChild(chatResponse)

        historyBox.appendChild(boxResponseMessage)
        historyBox.scrollTop = historyBox.scrollHeight

        function typeText(i, delay, text, element, cb) {
            text = text.replace('\r','')
            element.innerText += text.charAt(i)
            historyBox.scrollTop = historyBox.scrollHeight
            setTimeout(function(){
                ((i < text.length - 1) ? typeText(i+1, delay, text, element, cb) : cb())
            }, delay)
        }

        function updateResponseMessage(chunk, cb) {
            typeText(0, 20, chunk, chatResponse, cb)
        }

        return updateResponseMessage
    }
</script>
