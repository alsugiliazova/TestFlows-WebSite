<div class="page container-fluid text-center p-0" id="welcome-banner">
    <div class="banner in-view-watcher">
        <div id="banner-graph" class="banner-graph"></div>
        <h1><%- page.title %></h1>
        <h2><%- page.heading %></h2>
        <i class="fa-5x pt-3 <%- page.icon %>" style="color: lime"></i>
        <div id="api-key-status" class="text-success"><br></div>
        <div class="api-key-box input-group mb-3 col-sm-6" id="api-key-box">
            <input type="password" name="password" class="form-control text-center" placeholder="Enter access key here" id="api-key" aria-describedby="basic-addon3" oninput="checkApiKey()">
        </div>
    </div>
</div>
<div class="assistant container-fluid d-none" id="assistant">
    <div class="container">
        <div class="row">
            <div class="box-questions col-lg-6" id="box-questions">
                <div id="history">
                    <div class="btn-group" role="group" aria-label="control buttons">
                        <button class="btn disabled" type="submit" id="btn-copy" onclick="copyMessages()">
                            <a class="btn-icon far fa-copy"></a>
                        </button>
                        <button class="btn" type="submit" id="btn-help" data-toggle="modal" data-target="#helpModal">
                            <a class="btn-icon far fa-question-circle"></a>
                        </button>
                    </div>
                </div>
            </div>
            <div class="container assistant-control col-lg-6" id="assistant-control">
                <div id="status" class="text-success"><br></div>
                <div class="message-input-box">
                    <textarea id="message-input" class="code" name="message-input" data-message-id="0" placeholder="Type your request here and refer to TestFlows as testflows.core" oninput="inputMessage()"></textarea>
                    <div class="message-filler"></div>
                </div>
                <div class="btn-group" role="group" aria-label="control buttons">
                    <span class="btn-overlap-group">
                        <button class="btn disabled" type="submit" id="btn-submit" onclick="sendMessage()">
                            <a class="btn-icon fas fa-keyboard"></a>
                            <span class="btn-text">Start</span>
                        </button>
                        <button class="btn text-danger invisible" type="cancel" id="btn-cancel" onclick="cancelMessage()">
                            <a class="btn-icon fas fa-ban"></a>
                            <span class="btn-text">Cancel</span>
                        </button>
                    </span>
                    <button class="btn disabled" type="submit" id="btn-submit-change" onclick="changeMessage()">
                        <a class="btn-icon fas fa-comment-medical"></a>
                        <span class="btn-text">Change</span>
                    </button>
                    <button class="btn disabled" type="move-down" id="btn-move-down" onclick="moveDownMessage()">
                        <a class="btn-icon fas fa-arrow-down"></a>
                        <span class="btn-text">Down</span>
                    </button>
                    <button class="btn disabled" type="reset" id="btn-clear" onclick="clearMessages()">
                        <a class="btn-icon fas fa-redo"></a>
                        <span class="btn-text">Clear</span>
                    </button>
                    <button class="btn disabled" type="move-up" id="btn-move-up" onclick="moveUpMessage()">
                        <a class="btn-icon fas fa-arrow-up"></a>
                        <span class="btn-text">Up</span>
                    </button>
                    <button class="btn disabled" type="submit" id="btn-submit-reply" onclick="replyMessage()">
                        <a class="btn-icon fas fa-comment"></a>
                        <span class="btn-text">Reply</span>
                    </button>
                </div>
            </div>
        </div>
        <div class="modal fade" id="helpModal" tabindex="-1" role="dialog" aria-labelledby="help-modal-title" aria-hidden="true">
            <div class="modal-dialog" role="document">
              <div class="modal-content">
                <div class="modal-header">
                  <h1 class="modal-title" id="help-modal-title">Assistant Reference</h1>
                  <button type="button" class="btn" data-dismiss="modal" aria-label="Close">
                    <a class="btn-icon fas fa-times" aria-hidden="true"></a>
                  </button>
                </div>
                <div class="modal-body">
                    <p>The Assistant uses an advanced AI model to help testers write tests faster.</p>
                    <h2>Message controls</h2>
                    <p><ul>
                        <li>Use the <a class="btn-icon fas fa-keyboard"></a> button to start a new conversation.</li>
                        <li>Use the <a class="btn-icon fas fa-comment"></a> button to reply to the last message to continue the current conversation.</li>
                        <li>Use the <a class="btn-icon fas fa-redo"></a> button to clear all messages.</li>
                    </ul></p>
                    <h2>Questions box menu</h2>
                    <p>The questions box has the following buttons:
                        <ul>
                            <li>Use the <a class="btn-icon far fa-copy"></a>
                            button to copy the currently selected message to the clipboard.
                            The copied message will include the currently selected message and its response,
                            including the system message and any previous messages in the conversation at the top,
                            which form the context of the current message.button to copy currently
                            selected message into the clipboard.
                            </li>
                            <li>Use the <a class="btn-icon far fa-question-circle"></a> button to open assistant's reference.</li>
                        </ul>
                    </p>
                    <h2>Status Bar</h2>
                    <p>The status of the message is shown at the top of the message input box in the status bar.</p>
                    <p>The following status messages can be expected:
                        <ul>
                            <li><code>Status: sending</code> - message is being sent.</li>
                            <li><code>Status: in queue</code> - message has been queued for processing.</li>
                            <li><code>Status: completed</code> - message has been processed, and response has been completed.</li>
                        </ul>
                    </p>
                    <h2>Layout</h2>
                    <p>On large screens, the assistant is broken up into the left and right columns to provide
                    a convenient way to work with long questions and answers.</p>
                    <p>On mobile devices, the message controls are at the bottom, and a questions box with messages
                    and responses is shown at the top.</p>
                </div>
              </div>
            </div>
          </div>
    </div>
</div>
<%- partial('_partial/hero_graph') %>
<script>
    const emptyContext = '\n\n'
    const apiKeyCode = '69d2245ecf1e4049893c4327dfcaf5fdb795e548de43724ba8bfd4e01233891f3552fffa33ec7969'
    const urlCode = '2f31be98e988461fac622fed4fbe63a7298007609dd071c927ecb1475d25fb6f17433514b59a2e'
    var apiKey, url
    var historyPos = -1
    var messageContexts = {}

    function array2hex(array) {
        str = []
        for (x of array) {
            str.push(x.toString(16).padStart(2,'0'))
        }
        return str.join('')
    }

    function hex2array(hex) {
        function splitBy(str, n) {
            const arr = [];
            for (let index = 0; index < str.length; index += n) {
                arr.push(str.slice(index, index + n));
            }
            return arr;
        }
        array = []
        for (x of splitBy(hex,2)) {
            array.push(parseInt(x, 16))
        }
        return Uint8Array.from(array);
    }

    function encrypt(string) {
        encoded = new TextEncoder().encode(string)
        key = new Uint8Array(encoded.length)
        self.crypto.getRandomValues(key)
        code = encoded.map((c, i) => c ^ key[i])
        return {
            "code": array2hex(code),
            "key": array2hex(key)
        }
    }

    function decrypt(code, key) {
        key = hex2array(key)
        code = hex2array(code)
        return new TextDecoder().decode(code.map((c,i) => c ^ key[i]))
    }

    function checkApiKey() {
        var key = document.getElementById('api-key')
        var status = document.getElementById('api-key-status')
        var banner = document.getElementById('welcome-banner')
        var assistant = document.getElementById('assistant')

        if(!key.value) {
            status.innerText = 'No access key'
            return
        }

        key_parts = key.value.split('|')
        if (key_parts.length < 2) {
            status.innerText = 'Invalid access key format'
            return
        }

        url = decrypt(urlCode, key_parts[0])
        apiKey = decrypt(apiKeyCode, key_parts[1])

        if (!url.startsWith('https://')) {
            status.innerText = 'Invalid access key'
            return
        }

        fetch(`${url}/status/1`,{
            method: 'POST',
            headers: {
                Accept: "application/json",
                "Content-Type": "application/json",
                Authorization: `Bearer ${apiKey}`,
            },
        })
        .then((response) => {
            status.innerText = 'Access key is valid. Welcome!'
            banner.classList.add('d-none')
            assistant.classList.remove('d-none')
        })
        .catch((e) => {
            console.log(`Error -> ${e}`)
            status.innerHTML = 'Invalid access key'
        })
    }

    function buildPrompt(context, message) {
        return `Below is an instruction that describes a task. Write a response that appropriately completes the request.${context}### Instruction:\n\n${message}\n\n### Response:\n\n`
    }

    function copyMessages() {
        var history = document.getElementById('history')
        var messages = history.querySelectorAll('.my-message')
        var copy = document.getElementById('btn-copy')
        var copy_icon = copy.querySelector('a')

        var message = messages[messages.length-1-historyPos]
        var response = document.getElementById(message.getAttribute('response-id'))
        var context = messageContexts[message.getAttribute('id')]

        console.log("copy", context)

        navigator.clipboard.writeText(
            function() {
                var conversation = buildPrompt(context, message.innerText.trimEnd())
                conversation += response.innerText.trimEnd()
                return conversation
            }()
        ).then(
            function() {
                copy_icon.classList.remove('far')
                copy_icon.classList.add('fas')
                copy.classList.add('active')
                setTimeout(function() {
                    copy.classList.remove('active')
                    copy_icon.classList.remove('fas')
                    copy_icon.classList.add('far')
                }, 1000);
            }
        )
    }

    function scrollMessageIntoView(element) {
        element.scrollIntoView({
            behavior: 'auto',
            block: 'center',
            inline: 'center'
        });
    }

    function streamOutput(jobId, updateResponseMessage) {
        var status = document.getElementById('status')

        fetch(`${url}/stream/${jobId}`,{
            method: 'POST',
            headers: {
                Accept: "application/json",
                "Content-Type": "application/json",
                Authorization: `Bearer ${apiKey}`,
            },
        })
        .then((response) => {
            console.log(response)
            if (response.ok) {
                return response.json();
            }
            throw new Error(response.status);
        })
        .then((response) => {
            var responseMessage = ''
            status.innerHTML = 'Status: ' + response.status.toLowerCase().replace('_',' ')
            if ('stream' in response) {
                for (chunk of response.stream) {
                    for (text of chunk.output.text) {
                        responseMessage += text
                    }
                }
            }
            function cb() {
                if (response.status != 'COMPLETED' && response.status != 'FAILED' && response.status != 'CANCELLED') {
                    streamOutput(jobId, updateResponseMessage)
                }
                else {
                    var message = document.getElementById('message-input')
                    var send = document.getElementById('btn-submit')
                    var cancel = document.getElementById('btn-cancel')
                    var clear = document.getElementById('btn-clear')
                    send.classList.remove('invisible')
                    clear.classList.remove('disabled')
                    cancel.classList.add('invisible')

                    if (response.status != 'COMPLETED') {
                        updateResponseMessage(`>>> error: ${response.status} <<<`, function(){})
                    }
                }
            }
            updateResponseMessage(responseMessage, cb)
        })
        .catch((e) => {
            console.log(`Error -> ${e}`)
            status.innerHTML = `${e}`
            status.classList.add('text-danger')
            status.classList.remove('text-success')
        })
    }

    function clearMessages() {
        const history = document.getElementById('history')
        const message = document.getElementById('message-input')
        const move_up = document.getElementById('btn-move-up')
        const move_down = document.getElementById('btn-move-down')
        const clear = document.getElementById('btn-clear')
        const send = document.getElementById('btn-submit')
        const send_reply = document.getElementById('btn-submit-reply')
        const send_change = document.getElementById('btn-submit-change')

        while (history.firstChild) {
            if (history.lastChild) {
                if (history.lastChild.classList) {
                    if (!history.lastChild.classList.contains('btn-group')) {
                        history.removeChild(history.lastChild)
                    }
                    else {
                        break
                    }
                }
                else {
                    history.removeChild(history.lastChild)
                }
            }
        }

        messageContexts = {}
        message.setAttribute('data-message-id', '0')
        message.value = ''
        historyPos = -1

        move_up.classList.add('disabled')
        move_down.classList.add('disabled')
        clear.classList.add('disabled')
        send.classList.add('disabled')
        send_reply.classList.add('disabled')
        send_change.classList.add('disabled')
    }

    function moveUpMessage() {
        var message = document.getElementById('message-input')
        var history = document.getElementById('history')
        var move_down = document.getElementById('btn-move-down')
        var move_up = document.getElementById('btn-move-up')
        var copy = document.getElementById('btn-copy')
        copy.classList.remove('disabled')

        historyPos = Math.min(historyPos + 1, history.querySelectorAll('.my-message').length-1)

        var my_messages = history.querySelectorAll('.my-message')
        var selected_message = my_messages[my_messages.length - 1 - historyPos]

        if (historyPos > 0) {
            var prev_message = my_messages[my_messages.length - 1 - (historyPos-1)]
            prev_message.parentNode.classList.remove('active')
        }
        if (historyPos + 1 >= my_messages.length) {
            move_up.classList.add('disabled')
        }
        selected_message.parentNode.classList.add('active')
        scrollMessageIntoView(selected_message)
        move_down.classList.remove('disabled')
    }

    function moveDownMessage() {
        var message = document.getElementById('message-input')
        var history = document.getElementById('history')
        var my_messages = history.querySelectorAll('.my-message')
        var move_up = document.getElementById('btn-move-up')
        var move_down = document.getElementById('btn-move-down')
        var copy = document.getElementById('btn-copy')

        historyPos = historyPos - 1
        move_up.classList.remove('disabled')

        if (historyPos >= 0) {
            var selected_message = my_messages[my_messages.length -1 - historyPos]
            selected_message.parentNode.classList.add('active')
            scrollMessageIntoView(selected_message)

            if (historyPos + 1 < my_messages.length) {
                var prev_message = my_messages[my_messages.length - 1 - (historyPos+1)]
                prev_message.parentNode.classList.remove('active')
            }

            copy.classList.remove('disabled')
        }
        else {
            var prev_message = my_messages[my_messages.length -1]
            prev_message.parentNode.classList.remove('active')
            message.value = ''
            message.dispatchEvent(new Event("input"))
            historyPos = -1
            move_down.classList.add('disabled')
            copy.classList.add('disabled')
        }
    }

    function inputMessage() {
        var history = document.getElementById('history')
        var message = document.getElementById('message-input')
        var my_messages = history.querySelectorAll('.my-message')
        var send = document.getElementById('btn-submit')
        var send_reply = document.getElementById('btn-submit-reply')
        var send_change = document.getElementById('btn-submit-change')

        if (message.value) {
            send.classList.remove('disabled')
            if (my_messages.length > 0) {
                if (!send.classList.contains('invisible')) {
                    send_reply.classList.remove('disabled')
                }
            }
            if (historyPos > -1) {
                send_change.classList.remove('disabled')
            }
        }
        else {
            send.classList.add('disabled')
            send_reply.classList.add('disabled')
            send_change.classList.add('disabled')
        }
    }

    function cancelMessage() {
        var history = document.getElementById('history')
        var message = document.getElementById('message-input')
        var status = document.getElementById('status')
        var send = document.getElementById('btn-submit')
        var cancel = document.getElementById('btn-cancel')
        var messages = history.querySelectorAll('.my-message')
        const response_id = messages[messages.length-1].getAttribute('response-id')

        status.classList.remove('text-danger')
        status.classList.add('text-success')
        status.innerHTML = "Request: canceling"

        fetch(`${url}/cancel/${response_id}`,{
            method: 'POST',
            headers: {
                Accept: "application/json",
                "Content-Type": "application/json",
                Authorization: `Bearer ${apiKey}`,
            },
        })
        .then((response) => {
            if (response.ok || response.status == 404) {
                return response.json();
            }
            throw new Error(response.status);
        })
        .then((response) => {
            console.log(response)
            cancelled = false
            if (response.hasOwnProperty('status')) {
                status.innerHTML = 'Request: ' + response.status.toLowerCase()
                if (response.status == 'CANCELLED') {
                    cancelled = true
                }
            }
            if (response.hasOwnProperty('error')) {
                status.innerHTML = 'Request: ' + response.error
                switch (response.error) {
                    case 'job is already completed':
                    case 'id not found':
                        cancelled = true
                }
            }
            if (cancelled) {
                send.classList.remove('invisible')
                cancel.classList.add('invisible')
            }
        })
        .catch((e) => {
            console.log(`Error -> ${e}`)
            status.classList.add('text-danger')
            status.classList.remove('text-success')
            status.innerHTML = `${e}`
        })
    }

    function changeMessage() {
        var history = document.getElementById('history')
        var messages = history.querySelectorAll('.my-message')

        // if there are no messages or the very first message is selected
        // the just call startMessage
        if ( (history.querySelectorAll('.my-message').length < 1) || (historyPos + 1 >= messages.length)) {
            sendMessage()
            return
        }
        // find selected message
        var message = messages[messages.length-1-(historyPos+1)]
        var response = document.getElementById(message.getAttribute('response-id'))
        // create context
        var context = messageContexts[message.getAttribute('id')]
        context = `${context}${message.innerText}\n\n${response.innerText}\n\n`
        // send message
        sendMessage(context)
    }

    function replyMessage() {
        var history = document.getElementById('history')
        var messages = history.querySelectorAll('.my-message')

        // if there are no messages then just call sendMessage
        if ( history.querySelectorAll('.my-message').length < 1) {
            sendMessage()
            return
        }
        pos = historyPos
        if (pos == -1) {
            pos = 0
        }
        // find selected message
        var message = messages[messages.length-1-(pos)]
        var response = document.getElementById(message.getAttribute('response-id'))
        // create context
        var context = messageContexts[message.getAttribute('id')]
        context = `${context}${message.innerText}\n\n${response.innerText}\n\n`
        // send message
        sendMessage(context)
    }

    function sendMessage(context=emptyContext){
        var message = document.getElementById('message-input')
        var status = document.getElementById('status')
        var key = document.getElementById('api-key')
        var send = document.getElementById('btn-submit')
        var send_reply = document.getElementById('btn-submit-reply')
        var send_change = document.getElementById('btn-submit-change')
        var cancel = document.getElementById('btn-cancel')
        var move_up = document.getElementById('btn-move-up')
        var move_down = document.getElementById('btn-move-down')
        var clear = document.getElementById('btn-clear')
        var history = document.getElementById('history')
        var my_messages = history.querySelectorAll('.my-message')

        status.classList.remove('text-danger', 'text-success')

        if (send.classList.contains('disabled')) {
            return
        }

        if(!message.value) {
            status.innerText = 'Empty prompt'
            status.classList.add('text-danger')
            return
        }

        var responseMessage = ''

        status.style.display = 'block'
        status.innerHTML = 'Status: sending'
        status.classList.add('text-success')

        send.classList.add('invisible')
        cancel.classList.remove('invisible')

        send.classList.add('disabled')
        send_reply.classList.add('disabled')
        send_change.classList.add('disabled')
        clear.classList.add('disabled')
        move_up.classList.remove('disabled')
        move_down.classList.add('disabled')

        // deselect any currently selected message and enable move down
        if (historyPos > -1) {
            const selected_message = my_messages[my_messages.length -1 - historyPos]
            selected_message.parentNode.classList.remove('active')
        }

        historyPos = -1

        const prompt = buildPrompt(context, message.value)

        fetch(`${url}/run`,{
            method: 'POST',
            headers: {
                Accept: "application/json",
                "Content-Type": "application/json",
                Authorization: `Bearer ${apiKey}`,
            },
            body: JSON.stringify({
                input: {
                    "prompt": prompt
                }
            })
        })
        .then((response) => {
            if (response.ok) {
                return response.json();
            }
            throw new Error(response.status);
        })
        .then((response) => {
            console.log(response)
            var myMessage = createMessage(message, context)
            myMessage.setAttribute('response-id', response.id)
            updateResponseMessage = createResponseMessage(response.id)
            streamOutput(response.id, updateResponseMessage)
        })
        .catch((e) => {
            console.log(`Error -> ${e}`)
            status.innerHTML = `${e}`
            status.classList.add('text-danger')
            status.classList.remove('text-success')
            send.classList.remove('invisible')
            cancel.classList.add('invisible')
        })
        .finally(() => {
            message.value = ''
            message.setAttribute('data-message-id', parseInt(message.getAttribute('data-message-id')) + 1)
        })
    }

    function typeText(i, delay, text, element, cb) {
        text = text.replace('\r','')
        element.innerText += text.charAt(i)
        setTimeout(function(){
            ((i < text.length - 1) ? typeText(i+1, delay, text, element, cb) : cb())
        }, delay);
    }

    function createMessage(message, context) {
        var message_id = message.getAttribute('data-message-id')
        var historyBox = document.getElementById('history')

        var boxMyMessage = document.createElement('figure')
        boxMyMessage.classList.add('box-my-message','highlight')

        var myMessageIcons = document.createElement('div')
        myMessageIcons.className = 'message-icon'

        var myMessageAvatarIcon = document.createElement('i')
        myMessageAvatarIcon.className = 'message-avatar-icon fas fa-users'

        var myMessageTypeIcon = document.createElement('i')
        if (context == emptyContext) {
            myMessageTypeIcon.className = 'message-type-icon fas fa-keyboard'
        }
        else {
            myMessageTypeIcon.className = 'message-type-icon fas fa-comment'
        }

        myMessageIcons.appendChild(myMessageAvatarIcon)
        myMessageIcons.appendChild(myMessageTypeIcon)

        var myMessage = document.createElement('pre')
        myMessage.classList.add('my-message','code')
        myMessage.setAttribute('id', `my-message-${message_id}`)
        myMessage.innerText = message.value

        messageContexts[myMessage.getAttribute('id')] = context

        boxMyMessage.appendChild(myMessageIcons)
        boxMyMessage.appendChild(myMessage)

        historyBox.appendChild(boxMyMessage)

        codeblock_copy()

        return myMessage
    }

    function createResponseMessage(response_id, response='') {
        var questionsBox = document.getElementById('box-questions')
        var controlBox = document.getElementById('assistant-control')
        var historyBox = document.getElementById('history')

        var boxResponseMessage = document.createElement('figure')
        boxResponseMessage.classList.add('box-response-message', 'highlight')

        var chatResponseIcon = document.createElement('div')
        chatResponseIcon.className = 'message-icon fas fa-robot'

        var chatResponse = document.createElement('pre')
        chatResponse.classList.add('response-message','code')
        chatResponse.setAttribute('id', response_id)
        chatResponse.innerText = response

        boxResponseMessage.appendChild(chatResponseIcon)
        boxResponseMessage.appendChild(chatResponse)

        historyBox.appendChild(boxResponseMessage)
        codeblock_copy()

        questionsBox.scrollTop = questionsBox.scrollHeight

        function typeText(i, delay, text, element, cb) {
            text = text.replace('\r','')

            at_the_bottom = false
            if (questionsBox.scrollTop + 10 > (questionsBox.scrollHeight - questionsBox.offsetHeight)) {
                at_the_bottom = true
            }

            element.innerText += text.charAt(i)

            if (at_the_bottom) {
                questionsBox.scrollTop = questionsBox.scrollHeight
            }

            setTimeout(function(){
                ((i < text.length - 1) ? typeText(i+1, delay, text, element, cb) : cb())
            }, delay)
        }

        function updateResponseMessage(chunk, cb) {
            typeText(0, 10, chunk, chatResponse, cb)
        }

        return updateResponseMessage
    }
</script>
